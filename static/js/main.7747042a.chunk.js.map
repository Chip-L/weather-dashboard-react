{"version":3,"sources":["store/actions.js","store/dataReducer.js","store/GlobalState.js","components/Header/Header.js","config/MyConfig.js","components/Search/Search.js","components/CityList/CityList.js","utils/helpers.js","components/CurrentWeather/CurrentWeather.js","components/Forecast/Forecast.js","components/FiveDayForecast/FiveDayForecast.js","components/Weather/Weather.js","App.js","index.js"],"names":["GET_SEARCH_CITY","SET_CITY","SET_CITY_LIST","SET_WEATHER","SET_IS_LOADING","SET_ERROR","SET_UVI_STYLE","getSearchCity","city","type","setCity","payload","setIsLoading","setIsError","err","reducer","state","action","searchCity","isLoading","cityList","isError","weather","isSet","uviStyle","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","name","latitude","longitude","icon","src","alt","curTemp","curWindSpd","curHumidity","curUvi","fiveDayForecast","useReducer","dispatch","useStoreContext","useContext","Header","styled","header","Title","h1","OPEN_WEATHER_API_KEY","Container","section","Form","form","Label","label","Input","input","Button","button","Search","useState","cityInput","setCityInput","useEffect","url","controller","AbortController","fetch","signal","then","response","ok","message","status","Error","json","data","objCity","coord","lat","lon","catch","className","onSubmit","e","preventDefault","placeholder","onChange","target","div","CityList","storageKey","storedList","JSON","parse","localStorage","getItem","currentIndex","findIndex","storedCity","splice","unshift","length","setItem","stringify","setCityList","map","onClick","degreeSymbol","String","fromCharCode","formatDate","date","newDate","Date","getMonth","getDate","getFullYear","Div","City","p","Img","img","CurrentWeather","asOfDate","style","Card","Forecast","forecast","class","dt","description","temp","max","min","wind_speed","humidity","Heading","Row","FiveDayForecast","Weather","objWeather","current","uvi","daily","slice","setWeather","borderRadius","padding","fontSize","backgroundColor","color","getUVIStyle","Content","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7747042a.chunk.js","sourcesContent":["/** used in the search component to initially find the city */\r\nexport const GET_SEARCH_CITY = \"GET_SEARCH_CITY\";\r\n\r\n/** used in the CityList and search components to search a stored city (triggers fetch weather and set city list) */\r\nexport const SET_CITY = \"SET_CITY\";\r\n\r\n/** used in search component to store the city list */\r\nexport const SET_CITY_LIST = \"SET_CITY_LIST\";\r\n\r\n/** used to update the state of the weather (loading, data, errors) */\r\nexport const SET_WEATHER = \"SET_WEATHER\";\r\nexport const SET_IS_LOADING = \"SET_IS_LOADING\";\r\nexport const SET_ERROR = \"SET_ERROR\";\r\n\r\nexport const SET_UVI_STYLE = \"SET_UVI_STYLE\";\r\n\r\n// The idea for action creators came from: https://dev.to/markusclaus/fetching-data-from-an-api-using-reactredux-55ao\r\n\r\nexport const getSearchCity = (city) => {\r\n  return {\r\n    type: GET_SEARCH_CITY,\r\n    city: city,\r\n  };\r\n};\r\n\r\nexport const setCity = (city) => {\r\n  return {\r\n    type: SET_CITY,\r\n    payload: city,\r\n  };\r\n};\r\n\r\nexport const setCityList = (cityList) => {\r\n  return {\r\n    type: SET_CITY_LIST,\r\n    cityList: cityList,\r\n  };\r\n};\r\n\r\nexport const setIsLoading = () => {\r\n  return {\r\n    type: SET_IS_LOADING,\r\n  };\r\n};\r\n\r\nexport const setWeather = (weather) => {\r\n  return {\r\n    type: SET_WEATHER,\r\n    payload: weather,\r\n  };\r\n};\r\n\r\nexport const setIsError = (err) => {\r\n  return {\r\n    type: SET_ERROR,\r\n    payload: err,\r\n  };\r\n};\r\n\r\nexport const setUVIStyle = (style) => {\r\n  return {\r\n    type: SET_UVI_STYLE,\r\n    payload: style,\r\n  };\r\n};\r\n","import { useReducer } from \"react\";\r\nimport {\r\n  GET_SEARCH_CITY,\r\n  SET_CITY,\r\n  SET_WEATHER,\r\n  SET_IS_LOADING,\r\n  SET_ERROR,\r\n  SET_CITY_LIST,\r\n  SET_UVI_STYLE,\r\n} from \"./actions\";\r\n\r\nexport const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case GET_SEARCH_CITY:\r\n      return {\r\n        ...state,\r\n        searchCity: action.city,\r\n      };\r\n    case SET_CITY:\r\n      // console.log(\"userReducer: SET_SEARCH_CITY:\", action.payload);\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        city: action.payload,\r\n      };\r\n    case SET_CITY_LIST:\r\n      // console.log(\"userReducer: SET_CITY_LIST:\", action.cityList);\r\n      return {\r\n        ...state,\r\n        cityList: action.cityList,\r\n      };\r\n    case SET_IS_LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isError: null,\r\n        weather: { isSet: false },\r\n      };\r\n    case SET_WEATHER:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: null,\r\n        weather: action.payload,\r\n      };\r\n    case SET_ERROR:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: action.payload,\r\n        weather: { isSet: false },\r\n      };\r\n    case SET_UVI_STYLE:\r\n      return {\r\n        ...state,\r\n        uviStyle: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport function useDataReducer(initialState) {\r\n  return useReducer(reducer, initialState);\r\n}\r\n","import { createContext, useContext } from \"react\";\r\nimport { useDataReducer } from \"./dataReducer\";\r\n\r\nconst StoreContext = createContext();\r\nconst { Provider } = StoreContext;\r\n\r\nconst StoreProvider = ({ value = [], ...props }) => {\r\n  const [state, dispatch] = useDataReducer({\r\n    city: {\r\n      name: \"\",\r\n      latitude: \"\",\r\n      longitude: \"\",\r\n    },\r\n\r\n    searchCity: \"\",\r\n\r\n    isLoading: false,\r\n    isError: null,\r\n\r\n    weather: {\r\n      isSet: false,\r\n      icon: {\r\n        src: \"\",\r\n        alt: \"\",\r\n      },\r\n      curTemp: null,\r\n      curWindSpd: null,\r\n      curHumidity: null,\r\n      curUvi: null,\r\n      fiveDayForecast: [],\r\n    },\r\n\r\n    cityList: [],\r\n\r\n    uviStyle: {},\r\n  });\r\n\r\n  return <Provider value={[state, dispatch]} {...props} />;\r\n};\r\n\r\nconst useStoreContext = () => {\r\n  return useContext(StoreContext);\r\n};\r\n\r\nexport { StoreProvider, useStoreContext };\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Header = styled.header`\r\n  text-align: center;\r\n  max-width: 100%;\r\n\r\n  padding: 0.5rem 0.75rem;\r\n  background: linear-gradient(to right, blue, navy);\r\n  color: azure;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 2.5rem;\r\n  font-weight: 500;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nfunction header() {\r\n  return (\r\n    <Header>\r\n      <Title>Weather Dashboard</Title>\r\n    </Header>\r\n  );\r\n}\r\n\r\nexport default header;\r\n","export const OPEN_WEATHER_API_KEY = \"feff70f8d612132ecb7ca03754f46b78\";\r\n","import { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { OPEN_WEATHER_API_KEY } from \"../../config/MyConfig\";\r\n\r\nimport { useStoreContext } from \"../../store/GlobalState\";\r\nimport {\r\n  getSearchCity,\r\n  setCity,\r\n  setIsError,\r\n  setIsLoading,\r\n} from \"../../store/actions\";\r\n\r\nconst Container = styled.section`\r\n  margin: 0.5rem;\r\n  border-bottom: 2px solid black;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  display: grid;\r\n  gap: 0.5rem;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-size: 1.75rem;\r\n  font-weight: 700;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  display: block;\r\n  /* margin-top: 1rem; */\r\n  padding: 0.375rem 0.75rem;\r\n  font-size: 1rem;\r\n  font-weight: 400;\r\n  line-height: 1.5;\r\n  border: 1px solid #ced4da;\r\n  border-radius: 0.25rem;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background: #5098e6;\r\n  color: #c7dfe8;\r\n  margin-bottom: 1rem;\r\n  padding: 0.375rem 0.75rem;\r\n  font-size: 1rem;\r\n  font-weight: 400;\r\n  line-height: 1.5rem;\r\n  border: 1px solid transparent;\r\n  border-radius: 0.25rem;\r\n  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out,\r\n    border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\r\n`;\r\n\r\nfunction Search() {\r\n  const [{ searchCity }, dispatch] = useStoreContext();\r\n\r\n  const [cityInput, setCityInput] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (cityInput) {\r\n      dispatch(getSearchCity(cityInput));\r\n    }\r\n    setCityInput(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    // if no search city - skip this\r\n    if (!searchCity) return;\r\n\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${searchCity}&units=imperial&appid=${OPEN_WEATHER_API_KEY}`;\r\n\r\n    // this should control if the search is terminated before the results are back - I don't think I'm using it correct though\r\n    // TODO: fix abort controller\r\n    const controller = new AbortController();\r\n\r\n    // set loading to true (these will be reset in the other dispatches)\r\n    dispatch(setIsLoading());\r\n\r\n    // get the data\r\n    fetch(url, { signal: controller.signal })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          let message = \"\";\r\n          if (response.status === 404) {\r\n            message = `Unable to find ${searchCity}`;\r\n          } else {\r\n            message = `An error has occurred: ${response.status}`;\r\n          }\r\n          throw new Error(message);\r\n        }\r\n\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        const objCity = {\r\n          name: data.name,\r\n          latitude: data.coord.lat,\r\n          longitude: data.coord.lon,\r\n        };\r\n\r\n        dispatch(setCity(objCity));\r\n      })\r\n      .catch((err) => {\r\n        dispatch(setIsError(err));\r\n      });\r\n    // reset search city to \"\" so we don't keep trying to execute this block\r\n    dispatch(getSearchCity(\"\"));\r\n  }, [searchCity]);\r\n\r\n  return (\r\n    <Container className=\"search\">\r\n      <Form onSubmit={handleSubmit}>\r\n        <Label>Search for a City:</Label>\r\n        <Input\r\n          placeholder=\"City (no state)\"\r\n          type=\"text\"\r\n          value={cityInput}\r\n          onChange={(e) => {\r\n            setCityInput(e.target.value);\r\n          }}\r\n        />\r\n        <Button type=\"submit\">Search</Button>\r\n      </Form>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import { useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { setCity, setCityList } from \"../../store/actions\";\r\nimport { useStoreContext } from \"../../store/GlobalState\";\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  gap: 0.5rem;\r\n  margin: 0.5rem;\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  font-size: 1rem;\r\n  font-weight: 400;\r\n  line-height: 1.5rem;\r\n  color: #fff;\r\n  background-color: #6c757d;\r\n  border: 1px solid #6c757d;\r\n  border-radius: 0.25rem;\r\n  margin-bottom: 1rem;\r\n  padding: 0.375rem 0.75rem;\r\n`;\r\n\r\nfunction CityList() {\r\n  const [{ cityList, city }, dispatch] = useStoreContext();\r\n\r\n  /**  Store the information of the city.\r\n   *   If it is a new city it will add it to the front of the list. If it is an old city, move it to the front of the list.\r\n   * */\r\n  useEffect(() => {\r\n    const storageKey = \"weatherCityList\";\r\n    const maxInHistoryList = 10;\r\n\r\n    // get the list from local storage\r\n    const storedList = JSON.parse(localStorage.getItem(storageKey)) || [];\r\n    // console.log(storedList);\r\n\r\n    if (city.name) {\r\n      // get the index of the city to see if it is already in the list and remove it if it is\r\n      const currentIndex = storedList.findIndex(\r\n        (storedCity) => storedCity.name === city.name\r\n      );\r\n      if (currentIndex > -1) {\r\n        storedList.splice(currentIndex, 1);\r\n      }\r\n\r\n      // add city to the front of the array\r\n      storedList.unshift(city);\r\n\r\n      // set the size of the list\r\n      if (storedList.length > maxInHistoryList) {\r\n        storedList.length = maxInHistoryList;\r\n      }\r\n\r\n      // put back in local storage\r\n      localStorage.setItem(storageKey, JSON.stringify(storedList));\r\n    }\r\n    // update the cityList state\r\n    dispatch(setCityList(storedList));\r\n  }, [city]);\r\n\r\n  if (!cityList.length) {\r\n    return <Container></Container>;\r\n  } else {\r\n    return (\r\n      <Container>\r\n        {cityList.map((storedCity) => (\r\n          <Button\r\n            key={storedCity.name}\r\n            onClick={() => dispatch(setCity(storedCity))}\r\n          >\r\n            {storedCity.name}\r\n          </Button>\r\n        ))}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CityList;\r\n","export const degreeSymbol = String.fromCharCode(176);\r\n\r\nexport function formatTime(date) {\r\n  return date.toLocaleTimeString();\r\n}\r\n\r\n// The custom helper 'formatDate' takes in a timestamp\r\nexport function formatDate(date) {\r\n  // for some reason the date comes in in seconds, not milliseconds...\r\n  const newDate = new Date(date * 1000);\r\n  return `${\r\n    newDate.getMonth() + 1\r\n  }/${newDate.getDate()}/${newDate.getFullYear()}`;\r\n}\r\n\r\nexport function getUVIStyle(curUvi) {\r\n  const uviStyle = {\r\n    borderRadius: \".25rem\",\r\n    padding: \".25rem .5rem\",\r\n    fontSize: \"1.25rem\",\r\n  };\r\n\r\n  // console.log(curUvi);\r\n\r\n  if (curUvi <= 2) {\r\n    uviStyle.backgroundColor = \"green\";\r\n    uviStyle.color = \"azure\";\r\n  } else if (curUvi <= 5) {\r\n    uviStyle.backgroundColor = \"yellow\";\r\n  } else if (curUvi <= 7) {\r\n    uviStyle.backgroundColor = \"orange\";\r\n  } else if (curUvi <= 10) {\r\n    uviStyle.backgroundColor = \"red\";\r\n    uviStyle.color = \"azure\";\r\n  } else {\r\n    uviStyle.backgroundColor = \"violet\";\r\n    uviStyle.color = \"azure\";\r\n  }\r\n  return uviStyle;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nimport { degreeSymbol } from \"../../utils/helpers\";\r\n\r\nimport { useStoreContext } from \"../../store/GlobalState\";\r\n\r\nconst Div = styled.div`\r\n  display: grid;\r\n  gap: 1rem;\r\n  padding: 1rem;\r\n\r\n  border: 1px solid black;\r\n  font-size: 1.5rem;\r\n`;\r\n\r\nconst City = styled.p`\r\n  font-size: 2rem;\r\n  font-weight: 700;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst Img = styled.img`\r\n  vertical-align: middle;\r\n`;\r\n\r\nfunction CurrentWeather() {\r\n  const [{ city, weather, uviStyle }] = useStoreContext();\r\n\r\n  return (\r\n    <>\r\n      <Div>\r\n        <City>\r\n          {city.name} ({weather.asOfDate}){\" \"}\r\n          <Img src={weather.icon.src} alt={weather.icon.alt} />\r\n        </City>\r\n        <p>Temp: {weather.curTemp + degreeSymbol} F</p>\r\n        <p>Wind: {weather.curWindSpd} MPH</p>\r\n        <p>Humidity: {weather.curHumidity}%</p>\r\n        <p>\r\n          UV Index: <span style={uviStyle}>{weather.curUvi}</span>\r\n        </p>\r\n      </Div>\r\n      {/*\r\n          <div style={styles.fdfDiv}>\r\n            <p style={styles.fdfHeading}>5 day forecast</p>\r\n            <div style={styles.fdfRow}>\r\n              {weather.fiveDayForecast.map((forecast) => (\r\n                <Forecast forecast={forecast} key={forecast.dt} />\r\n              ))}\r\n            </div>\r\n          </div>\r\n          */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CurrentWeather;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { degreeSymbol, formatDate } from \"../../utils/helpers\";\r\n\r\nconst Card = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  padding: 0.5rem;\r\n  margin-bottom: 0.5rem;\r\n  border: 1px solid rgba(0, 0, 0, 0.125);\r\n  border-radius: 0.25rem;\r\n\r\n  background: #2d3e50;\r\n  color: azure;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  line-height: 1.5;\r\n`;\r\n\r\nconst Img = styled.img`\r\n  vertical-align: middle;\r\n`;\r\n/** this expects the prop forecast which contains the information to display for that specific forecast */\r\nfunction Forecast({ forecast }) {\r\n  return (\r\n    <Card>\r\n      <div class=\"content\">\r\n        <p>{formatDate(forecast.dt)}</p>\r\n        <Img\r\n          src={`https://openweathermap.org/img/wn/${forecast.weather[0].icon}.png`}\r\n          alt={forecast.weather[0].description}\r\n        />\r\n        <p>High: {forecast.temp.max + degreeSymbol} F</p>\r\n        <p>Low: {forecast.temp.min + degreeSymbol} F</p>\r\n        <p>Wind: {forecast.wind_speed} MPH</p>\r\n        <p>Humidity: {forecast.humidity}%</p>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Forecast;\r\n","import styled from \"styled-components\";\r\n\r\nimport { useStoreContext } from \"../../store/GlobalState\";\r\nimport Forecast from \"../Forecast/Forecast\";\r\n\r\nconst Heading = styled.p`\r\n  font-size: 1.75rem;\r\n  font-weight: 700;\r\n  margin: 0.5rem;\r\n`;\r\n\r\nconst Div = styled.div`\r\n  display: grid;\r\n  gap: 1rem;\r\n  padding: 1rem;\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: center;\r\n  justify-content: space-between;\r\n\r\n  padding: 0 1rem;\r\n\r\n  @media (min-width: 768px) {\r\n    flex-direction: row;\r\n  }\r\n`;\r\n\r\nfunction FiveDayForecast() {\r\n  const [{ weather }] = useStoreContext();\r\n\r\n  return (\r\n    <Div>\r\n      <Heading>5 day forecast</Heading>\r\n      <Row>\r\n        {weather.fiveDayForecast.map((forecast) => (\r\n          <Forecast forecast={forecast} key={forecast.dt} />\r\n        ))}\r\n      </Row>\r\n    </Div>\r\n  );\r\n}\r\n\r\nexport default FiveDayForecast;\r\n","import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { OPEN_WEATHER_API_KEY } from \"../../config/MyConfig\";\r\n\r\nimport CurrentWeather from \"../CurrentWeather/CurrentWeather\";\r\nimport { formatDate, getUVIStyle } from \"../../utils/helpers\";\r\n\r\nimport { useStoreContext } from \"../../store/GlobalState\";\r\nimport {\r\n  setIsError,\r\n  setIsLoading,\r\n  setWeather,\r\n  setUVIStyle,\r\n} from \"../../store/actions\";\r\nimport FiveDayForecast from \"../FiveDayForecast/FiveDayForecast\";\r\n\r\nconst Weather = () => {\r\n  const [{ city, isLoading, isError, weather }, dispatch] = useStoreContext();\r\n\r\n  useEffect(() => {\r\n    // check if this can even run\r\n    if (city.name === \"\") return;\r\n\r\n    const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${city.latitude}&lon=${city.longitude}&exclude=minutely,hourly&units=imperial&appid=${OPEN_WEATHER_API_KEY}`;\r\n\r\n    // this should control if the search is terminated before the results are back - I don't think I'm using it correct though\r\n    // TODO: fix abort controller\r\n    const controller = new AbortController();\r\n\r\n    dispatch(setIsLoading());\r\n\r\n    // get the data\r\n    fetch(url, { signal: controller.signal })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          const message = `An error has occurred: ${response.status}`;\r\n          throw new Error(message);\r\n        }\r\n\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        // console.log(data);\r\n\r\n        const objWeather = {\r\n          isSet: true,\r\n          icon: {\r\n            src: `https://openweathermap.org/img/wn/${data.current.weather[0].icon}.png`,\r\n            alt: data.current.weather[0].description,\r\n          },\r\n          curTemp: data.current.temp,\r\n          curWindSpd: data.current.wind_speed,\r\n          curHumidity: data.current.humidity,\r\n          curUvi: data.current.uvi,\r\n          asOfDate: formatDate(data.current.dt),\r\n          fiveDayForecast: data.daily.slice(1, 6), // 0 is today's forecast\r\n        };\r\n\r\n        dispatch(setWeather(objWeather));\r\n        dispatch(setUVIStyle(getUVIStyle(objWeather.curUvi)));\r\n      })\r\n      .catch((err) => {\r\n        dispatch(setIsError(err));\r\n      });\r\n  }, [city]);\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <div>Loading...</div>}\r\n      {isError && <div>{isError.message}</div>}\r\n\r\n      {weather.isSet && (\r\n        <>\r\n          <CurrentWeather />\r\n          <FiveDayForecast />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import styled from \"styled-components\";\n\nimport { StoreProvider } from \"./store/GlobalState\";\n\nimport Header from \"./components/Header/Header\";\nimport Search from \"./components/Search/Search\";\nimport CityList from \"./components/CityList/CityList\";\nimport Weather from \"./components/Weather/Weather\";\n\nconst Content = styled.div`\n  max-width: 1320px;\n  margin: auto;\n  padding: 1rem;\n\n  @media (min-width: 768px) {\n    display: grid;\n    grid-template-columns: auto auto auto auto auto auto;\n    gap: 1rem;\n\n    aside {\n      grid-column: 1;\n    }\n\n    section {\n      grid-column: 2 / span 5;\n    }\n  }\n`;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <StoreProvider>\n        <Content>\n          <aside>\n            <Search />\n            <CityList />\n          </aside>\n          <section>\n            <Weather />\n          </section>\n        </Content>\n      </StoreProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
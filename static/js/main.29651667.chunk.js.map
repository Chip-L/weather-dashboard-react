{"version":3,"sources":["store/actions.js","store/dataReducer.js","store/GlobalState.js","components/CityList/CityList.js","config/MyConfig.js","utils/helpers.js","components/Forecast/Forecast.js","components/CurrentWeather/CurrentWeather.js","components/Header/Header.js","components/Search/Search.js","App.js","index.js"],"names":["GET_SEARCH_CITY","SET_CITY","SET_CITY_LIST","SET_WEATHER","SET_IS_LOADING","SET_ERROR","getSearchCity","city","type","setCity","payload","setIsLoading","setIsError","err","reducer","state","action","searchCity","isLoading","cityList","isError","weather","isSet","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","name","latitude","longitude","icon","src","alt","curTemp","curWindSpd","curHumidity","curUvi","fiveDayForecast","useReducer","dispatch","useStoreContext","useContext","CityList","styles","container","display","gridGap","margin","marginTop","button","fontSize","fontWeight","lineHeight","color","backgroundColor","border","borderRadius","marginBottom","padding","useEffect","storageKey","storedList","JSON","parse","localStorage","getItem","currentIndex","findIndex","storedCity","splice","unshift","length","setItem","stringify","setCityList","style","map","onClick","OPEN_WEATHER_API_KEY","degreeSymbol","String","fromCharCode","formatDate","date","newDate","Date","getMonth","getDate","getFullYear","Forecast","forecast","card","background","img","verticalAlign","dt","description","temp","max","min","wind_speed","humidity","CurrentWeather","div","gap","fdfHeading","fdfDiv","fdfRow","justifyContent","useState","uviStyle","setUVIStyle","url","controller","AbortController","fetch","signal","then","response","ok","message","status","Error","json","data","objWeather","current","uvi","asOfDate","daily","slice","setWeather","getUVIStyle","catch","header","maxWidth","h1","Search","borderBottom","form","label","input","transition","cityInput","setCityInput","objCity","coord","lat","lon","className","onSubmit","e","preventDefault","placeholder","onChange","target","content","gridTemplateColumns","aside","gridColumn","section","App","Header","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29651667.chunk.js","sourcesContent":["/** used in the search component to initially find the city */\r\nexport const GET_SEARCH_CITY = \"GET_SEARCH_CITY\";\r\n\r\n/** used in the CityList and search components to search a stored city (triggers fetch weather and set city list) */\r\nexport const SET_CITY = \"SET_CITY\";\r\n\r\n/** used in search component to store the city list */\r\nexport const SET_CITY_LIST = \"SET_CITY_LIST\";\r\n\r\n/** used to update the state of the weather (loading, data, errors) */\r\nexport const SET_WEATHER = \"SET_WEATHER\";\r\nexport const SET_IS_LOADING = \"SET_IS_LOADING\";\r\nexport const SET_ERROR = \"SET_ERROR\";\r\n\r\n// The idea for action creators came from: https://dev.to/markusclaus/fetching-data-from-an-api-using-reactredux-55ao\r\n\r\nexport const getSearchCity = (city) => {\r\n  return {\r\n    type: GET_SEARCH_CITY,\r\n    city: city,\r\n  };\r\n};\r\n\r\nexport const setCity = (city) => {\r\n  return {\r\n    type: SET_CITY,\r\n    payload: city,\r\n  };\r\n};\r\n\r\nexport const setCityList = (cityList) => {\r\n  return {\r\n    type: SET_CITY_LIST,\r\n    cityList: cityList,\r\n  };\r\n};\r\n\r\nexport const setIsLoading = () => {\r\n  return {\r\n    type: SET_IS_LOADING,\r\n  };\r\n};\r\n\r\nexport const setWeather = (weather) => {\r\n  return {\r\n    type: SET_WEATHER,\r\n    payload: weather,\r\n  };\r\n};\r\n\r\nexport const setIsError = (err) => {\r\n  return {\r\n    type: SET_ERROR,\r\n    payload: err,\r\n  };\r\n};\r\n","import { useReducer } from \"react\";\r\nimport {\r\n  GET_SEARCH_CITY,\r\n  SET_CITY,\r\n  SET_WEATHER,\r\n  SET_IS_LOADING,\r\n  SET_ERROR,\r\n  SET_CITY_LIST,\r\n} from \"./actions\";\r\n\r\nexport const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case GET_SEARCH_CITY:\r\n      return {\r\n        ...state,\r\n        searchCity: action.city,\r\n      };\r\n    case SET_CITY:\r\n      // console.log(\"userReducer: SET_SEARCH_CITY:\", action.payload);\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        city: action.payload,\r\n      };\r\n    case SET_CITY_LIST:\r\n      // console.log(\"userReducer: SET_CITY_LIST:\", action.cityList);\r\n      return {\r\n        ...state,\r\n        cityList: action.cityList,\r\n      };\r\n    case SET_IS_LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isError: null,\r\n        weather: { isSet: false },\r\n      };\r\n    case SET_WEATHER:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: null,\r\n        weather: action.payload,\r\n      };\r\n    case SET_ERROR:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: action.payload,\r\n        weather: { isSet: false },\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport function useDataReducer(initialState) {\r\n  return useReducer(reducer, initialState);\r\n}\r\n","import { createContext, useContext } from \"react\";\r\nimport { useDataReducer } from \"./dataReducer\";\r\n\r\nconst StoreContext = createContext();\r\nconst { Provider } = StoreContext;\r\n\r\nconst StoreProvider = ({ value = [], ...props }) => {\r\n  const [state, dispatch] = useDataReducer({\r\n    city: {\r\n      name: \"\",\r\n      latitude: \"\",\r\n      longitude: \"\",\r\n    },\r\n\r\n    searchCity: \"\",\r\n\r\n    isLoading: false,\r\n    isError: null,\r\n\r\n    weather: {\r\n      isSet: false,\r\n      icon: {\r\n        src: \"\",\r\n        alt: \"\",\r\n      },\r\n      curTemp: null,\r\n      curWindSpd: null,\r\n      curHumidity: null,\r\n      curUvi: null,\r\n      fiveDayForecast: [],\r\n    },\r\n\r\n    cityList: [],\r\n  });\r\n\r\n  return <Provider value={[state, dispatch]} {...props} />;\r\n};\r\n\r\nconst useStoreContext = () => {\r\n  return useContext(StoreContext);\r\n};\r\n\r\nexport { StoreProvider, useStoreContext };\r\n","import { useEffect } from \"react\";\r\nimport { setCity, setCityList } from \"../../store/actions\";\r\nimport { useStoreContext } from \"../../store/GlobalState\";\r\n\r\nfunction CityList() {\r\n  const styles = {\r\n    container: {\r\n      display: \"grid\",\r\n      gridGap: \".5rem\",\r\n      margin: \".5rem\",\r\n      marginTop: \"1rem\",\r\n    },\r\n    button: {\r\n      fontSize: \"1rem\",\r\n      fontWeight: 400,\r\n      lineHeight: \"1.5rem\",\r\n      color: \"#fff\",\r\n      backgroundColor: \"#6c757d\",\r\n      border: \"1px solid #6c757d\",\r\n      borderRadius: \".25rem\",\r\n      marginBottom: \"1rem\",\r\n      padding: \".375rem .75rem\",\r\n    },\r\n  };\r\n\r\n  const [{ cityList, city }, dispatch] = useStoreContext();\r\n\r\n  /**  Store the information of the city.\r\n   *   If it is a new city it will add it to the front of the list. If it is an old city, move it to the front of the list.\r\n   * */\r\n  useEffect(() => {\r\n    const storageKey = \"weatherCityList\";\r\n    const maxInHistoryList = 10;\r\n\r\n    // get the list from local storage\r\n    const storedList = JSON.parse(localStorage.getItem(storageKey)) || [];\r\n    // console.log(storedList);\r\n\r\n    if (city.name) {\r\n      // get the index of the city to see if it is already in the list and remove it if it is\r\n      const currentIndex = storedList.findIndex(\r\n        (storedCity) => storedCity.name === city.name\r\n      );\r\n      if (currentIndex > -1) {\r\n        storedList.splice(currentIndex, 1);\r\n      }\r\n\r\n      // add city to the front of the array\r\n      storedList.unshift(city);\r\n\r\n      // set the size of the list\r\n      if (storedList.length > maxInHistoryList) {\r\n        storedList.length = maxInHistoryList;\r\n      }\r\n\r\n      // put back in local storage\r\n      localStorage.setItem(storageKey, JSON.stringify(storedList));\r\n    }\r\n    // update the cityList state\r\n    dispatch(setCityList(storedList));\r\n  }, [city]);\r\n\r\n  if (!cityList.length) {\r\n    return <div></div>;\r\n  } else {\r\n    return (\r\n      <div style={styles.container}>\r\n        {cityList.map((storedCity) => (\r\n          <button\r\n            key={storedCity.name}\r\n            onClick={() => dispatch(setCity(storedCity))}\r\n            style={styles.button}\r\n          >\r\n            {storedCity.name}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CityList;\r\n","export const OPEN_WEATHER_API_KEY = \"feff70f8d612132ecb7ca03754f46b78\";\r\n","export const degreeSymbol = String.fromCharCode(176);\r\n\r\nexport function formatTime(date) {\r\n  return date.toLocaleTimeString();\r\n}\r\n\r\n// The custom helper 'formatDate' takes in a timestamp\r\nexport function formatDate(date) {\r\n  // for some reason the date comes in in seconds, not milliseconds...\r\n  const newDate = new Date(date * 1000);\r\n  return `${\r\n    newDate.getMonth() + 1\r\n  }/${newDate.getDate()}/${newDate.getFullYear()}`;\r\n}\r\n\r\nexport function getUVIStyle(curUvi) {\r\n  const uviStyle = {\r\n    borderRadius: \".25rem\",\r\n    padding: \".25rem .5rem\",\r\n    fontSize: \"1.25rem\",\r\n  };\r\n\r\n  // console.log(curUvi);\r\n\r\n  if (curUvi <= 2) {\r\n    uviStyle.backgroundColor = \"green\";\r\n    uviStyle.color = \"azure\";\r\n  } else if (curUvi <= 5) {\r\n    uviStyle.backgroundColor = \"yellow\";\r\n  } else if (curUvi <= 7) {\r\n    uviStyle.backgroundColor = \"orange\";\r\n  } else if (curUvi <= 10) {\r\n    uviStyle.backgroundColor = \"red\";\r\n    uviStyle.color = \"azure\";\r\n  } else {\r\n    uviStyle.backgroundColor = \"violet\";\r\n    uviStyle.color = \"azure\";\r\n  }\r\n  return uviStyle;\r\n}\r\n","import React from \"react\";\r\nimport { degreeSymbol, formatDate } from \"../../utils/helpers\";\r\n\r\nfunction Forecast({ forecast }) {\r\n  const styles = {\r\n    card: {\r\n      background: \"#2d3e50\",\r\n      color: \"azure\",\r\n      fontSize: \"1rem\",\r\n      fontWeight: \"bold\",\r\n      lineHeight: 1.5,\r\n      padding: \".5rem\",\r\n      // display: \"flex\",\r\n      // flexDirection: \"column\",\r\n      border: \"1px solid rgba(0,0,0,.125)\",\r\n      borderRadius: \".25rem\",\r\n    },\r\n    img: {\r\n      verticalAlign: \"middle\",\r\n    },\r\n  };\r\n  return (\r\n    <div style={styles.card}>\r\n      <p>{formatDate(forecast.dt)}</p>\r\n      <img\r\n        src={`https://openweathermap.org/img/wn/${forecast.weather[0].icon}.png`}\r\n        alt={forecast.weather[0].description}\r\n        style={styles.img}\r\n      />\r\n      <p>High: {forecast.temp.max + degreeSymbol} F</p>\r\n      <p>Low: {forecast.temp.min + degreeSymbol} F</p>\r\n      <p>Wind: {forecast.wind_speed} MPH</p>\r\n      <p>Humidity: {forecast.humidity}%</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Forecast;\r\n","import { useEffect, useState } from \"react\";\r\nimport { OPEN_WEATHER_API_KEY } from \"../../config/MyConfig\";\r\n\r\nimport { formatDate, getUVIStyle, degreeSymbol } from \"../../utils/helpers\";\r\n\r\nimport { useStoreContext } from \"../../store/GlobalState\";\r\nimport { setIsError, setIsLoading, setWeather } from \"../../store/actions\";\r\nimport Forecast from \"../Forecast/Forecast\";\r\n\r\nfunction CurrentWeather() {\r\n  const styles = {\r\n    div: {\r\n      display: \"grid\",\r\n      gap: \"1rem\",\r\n      padding: \"1rem\",\r\n\r\n      border: \"1px solid black\",\r\n      fontSize: \"1.5rem\",\r\n    },\r\n    city: {\r\n      fontSize: \"2rem\",\r\n      fontWeight: 700,\r\n      marginBottom: \".5rem\",\r\n    },\r\n    img: {\r\n      verticalAlign: \"middle\",\r\n    },\r\n    fdfHeading: {\r\n      fontSize: \"1.75rem\",\r\n      fontWeight: 700,\r\n      margin: \".5rem\",\r\n    },\r\n    fdfDiv: {\r\n      display: \"grid\",\r\n      gap: \"1rem\",\r\n      padding: \"1rem\",\r\n    },\r\n    fdfRow: {\r\n      display: \"flex\",\r\n      justifyContent: \"space-between\",\r\n      padding: \"0 1rem\",\r\n    },\r\n  };\r\n\r\n  const [{ city, isLoading, isError, weather }, dispatch] = useStoreContext();\r\n\r\n  const [uviStyle, setUVIStyle] = useState({});\r\n\r\n  useEffect(() => {\r\n    // check if this can even run\r\n    if (city.name === \"\") return;\r\n\r\n    const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${city.latitude}&lon=${city.longitude}&exclude=minutely,hourly&units=imperial&appid=${OPEN_WEATHER_API_KEY}`;\r\n\r\n    // this should control if the search is terminated before the results are back - I don't think I'm using it correct though\r\n    // TODO: fix abort controller\r\n    const controller = new AbortController();\r\n\r\n    dispatch(setIsLoading());\r\n\r\n    // get the data\r\n    fetch(url, { signal: controller.signal })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          const message = `An error has occurred: ${response.status}`;\r\n          throw new Error(message);\r\n        }\r\n\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        // console.log(data);\r\n\r\n        const objWeather = {\r\n          isSet: true,\r\n          icon: {\r\n            src: `https://openweathermap.org/img/wn/${data.current.weather[0].icon}.png`,\r\n            alt: data.current.weather[0].description,\r\n          },\r\n          curTemp: data.current.temp,\r\n          curWindSpd: data.current.wind_speed,\r\n          curHumidity: data.current.humidity,\r\n          curUvi: data.current.uvi,\r\n          asOfDate: formatDate(data.current.dt),\r\n          fiveDayForecast: data.daily.slice(1, 6), // 0 is today's forecast\r\n        };\r\n\r\n        dispatch(setWeather(objWeather));\r\n        setUVIStyle(getUVIStyle(objWeather.curUvi));\r\n      })\r\n      .catch((err) => {\r\n        dispatch(setIsError(err));\r\n      });\r\n  }, [city]);\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <div>Loading...</div>}\r\n      {isError && <div>{isError.message}</div>}\r\n\r\n      {weather.isSet && (\r\n        <>\r\n          <div style={styles.div}>\r\n            <p style={styles.city}>\r\n              {city.name} ({weather.asOfDate}){\" \"}\r\n              <img\r\n                style={styles.img}\r\n                src={weather.icon.src}\r\n                alt={weather.icon.alt}\r\n              />\r\n            </p>\r\n            <p>Temp: {weather.curTemp + degreeSymbol} F</p>\r\n            <p>Wind: {weather.curWindSpd} MPH</p>\r\n            <p>Humidity: {weather.curHumidity}%</p>\r\n            <p>\r\n              UV Index: <span style={uviStyle}>{weather.curUvi}</span>\r\n            </p>\r\n          </div>\r\n          <div style={styles.fdfDiv}>\r\n            <p style={styles.fdfHeading}>5 day forecast</p>\r\n            <div style={styles.fdfRow}>\r\n              {weather.fiveDayForecast.map((forecast) => (\r\n                <Forecast forecast={forecast} key={forecast.dt} />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CurrentWeather;\r\n","import React from \"react\";\r\n\r\nconst styles = {\r\n  header: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n\r\n    padding: \".5rem .75rem\",\r\n    background: \"linear-gradient(to right, blue, navy)\",\r\n    color: \"azure\",\r\n\r\n    maxWidth: \"100%\",\r\n  },\r\n  h1: {\r\n    fontSize: \"2.5rem\",\r\n    fontWeight: 500,\r\n    marginBottom: \".5rem\",\r\n  },\r\n};\r\n\r\nfunction header() {\r\n  return (\r\n    <header style={styles.header}>\r\n      <h1 style={styles.h1}>Weather Dashboard</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default header;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nimport { OPEN_WEATHER_API_KEY } from \"../../config/MyConfig\";\r\n\r\nimport { useStoreContext } from \"../../store/GlobalState\";\r\nimport {\r\n  getSearchCity,\r\n  setCity,\r\n  setIsError,\r\n  setIsLoading,\r\n} from \"../../store/actions\";\r\n\r\nfunction Search() {\r\n  const styles = {\r\n    container: {\r\n      margin: \".5rem\",\r\n      borderBottom: \"2px solid black\",\r\n    },\r\n    form: {\r\n      display: \"grid\",\r\n      gridGap: \".5rem\",\r\n    },\r\n    label: {\r\n      fontSize: \"1.75rem\",\r\n      fontWeight: 700,\r\n      marginBottom: \".5rem\",\r\n    },\r\n    input: {\r\n      display: \"block\",\r\n      // marginTop: \"1rem\",\r\n      padding: \".375rem .75rem\",\r\n      fontSize: \"1rem\",\r\n      fontWeight: 400,\r\n      lineHeight: 1.5,\r\n      border: \"1px solid #ced4da\",\r\n      borderRadius: \".25rem\",\r\n    },\r\n    button: {\r\n      background: \"#5098e6\",\r\n      color: \"#c7dfe8\",\r\n      marginBottom: \"1rem\",\r\n      padding: \".375rem .75rem\",\r\n      fontSize: \"1rem\",\r\n      fontWeight: 400,\r\n      lineHeight: \"1.5rem\",\r\n      border: \"1px solid transparent\",\r\n      borderRadius: \".25rem\",\r\n      transition:\r\n        \"color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out\",\r\n    },\r\n  };\r\n\r\n  const [{ searchCity }, dispatch] = useStoreContext();\r\n\r\n  const [cityInput, setCityInput] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (cityInput) {\r\n      dispatch(getSearchCity(cityInput));\r\n    }\r\n    setCityInput(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    // if no search city - skip this\r\n    if (!searchCity) return;\r\n\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${searchCity}&units=imperial&appid=${OPEN_WEATHER_API_KEY}`;\r\n\r\n    // this should control if the search is terminated before the results are back - I don't think I'm using it correct though\r\n    // TODO: fix abort controller\r\n    const controller = new AbortController();\r\n\r\n    // set loading to true (these will be reset in the other dispatches)\r\n    dispatch(setIsLoading());\r\n\r\n    // get the data\r\n    fetch(url, { signal: controller.signal })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          let message = \"\";\r\n          if (response.status === 404) {\r\n            message = `Unable to find ${searchCity}`;\r\n          } else {\r\n            message = `An error has occurred: ${response.status}`;\r\n          }\r\n          throw new Error(message);\r\n        }\r\n\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        const objCity = {\r\n          name: data.name,\r\n          latitude: data.coord.lat,\r\n          longitude: data.coord.lon,\r\n        };\r\n\r\n        dispatch(setCity(objCity));\r\n      })\r\n      .catch((err) => {\r\n        dispatch(setIsError(err));\r\n      });\r\n    // reset search city to \"\" so we don't keep trying to execute this block\r\n    dispatch(getSearchCity(\"\"));\r\n  }, [searchCity]);\r\n\r\n  return (\r\n    <section className=\"search\" style={styles.container}>\r\n      <form style={styles.form} onSubmit={handleSubmit}>\r\n        <label style={styles.label}>Search for a City:</label>\r\n        <input\r\n          placeholder=\"City (no state)\"\r\n          type=\"text\"\r\n          style={styles.input}\r\n          value={cityInput}\r\n          onChange={(e) => {\r\n            setCityInput(e.target.value);\r\n          }}\r\n        />\r\n        <button type=\"submit\" style={styles.button}>\r\n          Search\r\n        </button>\r\n      </form>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import CityList from \"./components/CityList/CityList\";\nimport CurrentWeather from \"./components/CurrentWeather/CurrentWeather\";\nimport Header from \"./components/Header/Header\";\nimport Search from \"./components/Search/Search\";\nimport { StoreProvider } from \"./store/GlobalState\";\n\nconst styles = {\n  content: {\n    maxWidth: \"1320px\",\n    margin: \"auto\",\n    padding: \"1rem\",\n\n    display: \"grid\",\n    gridTemplateColumns: \"auto auto auto auto auto auto\",\n    gridGap: \"1rem\",\n  },\n  aside: {\n    gridColumn: 1,\n  },\n  section: {\n    gridColumn: \"2 / span 5\",\n    // border: \"1px solid black\",\n  },\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <StoreProvider>\n        <div className=\"content\" style={styles.content}>\n          <aside style={styles.aside}>\n            <Search />\n            <CityList />\n          </aside>\n          <section style={styles.section}>\n            <CurrentWeather />\n          </section>\n        </div>\n      </StoreProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}